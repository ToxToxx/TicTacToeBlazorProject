@page "/"
@using TicTacToeBlazorProject.Shared
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<div class="flex flex-col items-center justify-center min-h-screen bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 text-white">
    <div class="w-full max-w-lg bg-white shadow-md rounded-lg p-6 text-black">
        <h3 class="text-3xl font-bold mb-6 text-center text-indigo-700">Lobby of Tic Tac Toe Game</h3>

        @if (currentRoom is null)
        {

            <div class="mb-4">
                <input @bind="playerName" placeholder="Player Name" class="border rounded px-3 py-2 mb-2 w-full text-black" />
                <input @bind="currentRoomName" placeholder="Room Name" class="border rounded px-3 py-2 mb-2 w-full text-black" />
                <div class="text-center">
                    <button @onclick="CreateRoom" class="px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700">Create Room</button>
                </div>
            </div>

            <h3 class="text-xl font-medium mb-2 text-center text-indigo-700">Rooms:</h3>
            <ul class="space-y-2">
                @foreach (var room in rooms)
                {
                    <li class="flex justify-between items-center bg-gray-200 p-2 rounded-lg shadow">
                        <span class="font-semibold text-indigo-700">@room.RoomName</span>
                        <button @onclick="() => JoinRoom(room.RoomId)" class="px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600">Join</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <CascadingValue Value="hubConnection">
                <Room CurrentRoom="currentRoom" />
            </CascadingValue>
        }
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private string playerName = string.Empty;
    private string currentRoomName = string.Empty;
    private GameRoom? currentRoom;
    private List<GameRoom> rooms = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<List<GameRoom>>("Rooms", (roomsList) =>
        {
            Console.WriteLine($"Rooms. Count = {roomsList.Count}");
            rooms = roomsList;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }


    private async Task CreateRoom()
    {
        if (hubConnection is null) return;

        currentRoom = await hubConnection
        .InvokeAsync<GameRoom>
        ("CreateRoom", currentRoomName,playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (hubConnection is null) return;

        var joinedRoom = await hubConnection.
        InvokeAsync<GameRoom>
        ("JoinRoom", roomId, playerName);

        if(joinedRoom is not null)
        {
            currentRoom = joinedRoom;
        }
        else
        {
            Console.WriteLine("Room is full or does not exist");
        }
    }
}
