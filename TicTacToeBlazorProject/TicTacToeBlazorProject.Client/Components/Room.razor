@if (CurrentRoom is not null)
{
    <h3 class="text-3xl font-bold mb-6 text-center text-indigo-700">@CurrentRoom.RoomName</h3>

    @if (CurrentRoom.Players.Count < 2)
    {
        <h4 class="text-lg text-gray-600 text-center">Waiting for another player to join...</h4>
    }

    @if (!CurrentRoom.Game.GameStarted && CurrentRoom.Game.PlayerXId != myPlayerId && CurrentRoom.Players.Count == 2)
    {
        <h4 class="text-lg text-gray-600 text-center">Waiting for the other to start the game...</h4>
    }

    @if (CurrentRoom.Game.GameOver && !CurrentRoom.Game.IsDraw)
    {
        <h4 class="text-lg text-green-600 text-center">Game Over! Winner: @CurrentRoom.Game.Winner</h4>
    }

    @if (CurrentRoom.Game.GameOver && CurrentRoom.Game.IsDraw)
    {
        <h4 class="text-lg text-blue-600 text-center">Draw!</h4>
    }

    @if ((!CurrentRoom.Game.GameStarted || CurrentRoom.Game.GameOver) && CurrentRoom.Game.PlayerXId == myPlayerId && CurrentRoom.Players.Count == 2)
    {
        <div class="text-center mt-4">
            <button class="mt-4 px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700" @onclick="StartGame">Start Game</button>
        </div>
    }

    @if (CurrentRoom.Game.GameStarted)
    {
        <h4 class="text-xl font-medium mb-4 text-center">It's @CurrentRoom.Game.CurrentPlayerSymbol's Turn</h4>
        <div class="text-center mb-6 text-gray-600">Currently playing: @CurrentRoom.Players[0].Name (x) || @CurrentRoom.Players[1].Name (o)</div>

        <div class="flex justify-center">
            <table class="tic-tac-toe w-auto text-center border-collapse border border-gray-800">
                @for (int row = 0; row < 3; row++)
                {
                    <tr>
                        @for (int col = 0; col < 3; col++)
                        {
                            var r = row;
                            var c = col;
                            <td class="w-20 h-20 border border-gray-800 cursor-pointer hover:bg-gray-300 text-3xl font-bold" @onclick="() => MakeMove(r,c)">
                                @CurrentRoom.Game.Board[r][c]
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>

        @if (!IsMyTurn() && !CurrentRoom.Game.GameOver)
        {
            <p class="text-center text-gray-600 mt-4">It's the other player's turn</p>
        }
    }
}

@code {
    private string? myPlayerId;
    [CascadingParameter]
    public HubConnection? HubConnection { get; set; }
    [Parameter]
    public GameRoom? CurrentRoom { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CurrentRoom is null
            || HubConnection is null
            || HubConnection.ConnectionId is null)
            return;

        myPlayerId = HubConnection.ConnectionId;

        HubConnection.On<Player>("PlayerJoined", player =>
        {
            if (CurrentRoom is not null)
            {
                CurrentRoom.Players.Add(player);
                InvokeAsync(StateHasChanged);
            }
        });

        HubConnection.On<GameRoom>("UpdateGame", serverRoom =>
        {
            CurrentRoom = serverRoom;
            StateHasChanged();
        });
    }

    private async Task StartGame()
    {
        if (HubConnection is null || CurrentRoom is null) return;

        await HubConnection
        .InvokeAsync("StartGame", CurrentRoom.RoomId);
    }

    private async Task MakeMove(int row, int col)
    {
        if (IsMyTurn() && CurrentRoom is not null 
            && CurrentRoom.Game.GameStarted
            && !CurrentRoom.Game.GameOver
            && HubConnection is not null)
        {
            await HubConnection.InvokeAsync("MakeMove",
                  CurrentRoom.RoomId,
                  row,
                  col,
                  myPlayerId);
        }
        
    }

    private bool IsMyTurn()
    {
        if(CurrentRoom is not null)
        {
            return myPlayerId == CurrentRoom.Game.CurrentPlayerId;
        }
        return false;
    }
}
